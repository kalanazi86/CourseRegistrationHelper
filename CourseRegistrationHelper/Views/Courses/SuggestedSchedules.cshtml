@model List<List<SectionViewModel>>

@{
    ViewData["Title"] = "Suggested Schedules";
}

<h2>Suggested Schedules</h2>

@* @for (int i = 1; i < Model.Count; i++)
{
    <h3>Schedule @i</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Course Name</th>
                <th>Course Symbol</th>
                <th>Days</th>
                <th>Time</th>
                <th>Location</th>
                <th>Instructor</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sectionS in Model[i])
            {
                <tr>
                    <td>@sectionS.CourseName</td>
                    <td>@sectionS.CourseSymbol</td>
                    <td>@sectionS.Days</td>
                    <td>@sectionS.StartTime - @sectionS.EndTime</td>
                    <td>@sectionS.Location</td>
                    <td>@sectionS.Instructor</td>
                </tr>
            }
        </tbody>
    </table>
    <button onclick="registerSchedule(@i)" class="btn btn-primary">Register</button>
    <button onclick="shareSchedule(@i)" class="btn btn-secondary">Share</button>
} *@


@* ============================================================================================================ *@
@foreach (var schedule in Model.Select((value, index) => new { value, index }))
{
    <h3>Schedule @(schedule.index + 1)</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Time</th>
                <th>Sunday</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <!-- Add headers for Friday and Saturday if needed -->
            </tr>
        </thead>
        <tbody>
            <!-- Iterate through time slots, for each time slot check if there is a class in the schedule -->
            @foreach (var timeSlot in GetTimeSlots(schedule.value))
            {
                <tr>
                    <td>@timeSlot</td>
                    @foreach (var day in Enum.GetValues(typeof(DayOfWeek)))
                    {
                        <td>
                            @RenderSectionForDayAndTime(schedule.value, (DayOfWeek)day, timeSlot)
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary">Register</button>
    <button class="btn btn-secondary">Share</button>
}

@functions {
    private string RenderSectionForDayAndTime(IEnumerable<SectionViewModel> sections, DayOfWeek day, TimeSpan timeSlot)
    {
        var section = sections.FirstOrDefault(s => s.DaysOfWeek.Contains(day) && s.StartTime == timeSlot);
        return section != null ? $"{section.CourseSymbol} - {section.Instructor}" : string.Empty;
    }

    private IEnumerable<TimeSpan> GetTimeSlots(IEnumerable<SectionViewModel> sections)
    {
        // Assuming you have a method to get all distinct time slots from the sections
        return sections.SelectMany(s => new[] { s.StartTime, s.EndTime }).Distinct().OrderBy(t => t);
    }
}
@* ============================================================================================================ *@


@section Scripts {
    <script>
        function registerSchedule(scheduleIndex) {
            // Implement logic to register the selected schedule
            // For example, post to a controller action with the schedule index or ID
        }

        function shareSchedule(scheduleIndex) {
            // Implement logic to share the selected schedule
            // This might involve opening a mail client, copying the schedule to the clipboard, etc.
        }
    </script>
}
